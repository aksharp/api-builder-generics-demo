/**
  * Generated by API Builder - https://www.apibuilder.io
  * Service version: test-0.0.1
  * apibuilder 0.14.3 app.apibuilder.io/flow/job-internal-before-generic/test-0.0.1/play_2_6_client
  */
package io.flow.job.internal.before.generic.models {

  sealed trait JobError extends _root_.scala.Product with _root_.scala.Serializable

  /**
    * Defines the valid discriminator values for the type JobError
    */
  sealed trait JobErrorDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object JobErrorDiscriminator {

    case object JobDatabaseError extends JobErrorDiscriminator { override def toString = "job_database_error" }
    case object JobGenericError extends JobErrorDiscriminator { override def toString = "job_generic_error" }

    final case class UNDEFINED(override val toString: String) extends JobErrorDiscriminator

    val all: scala.List[JobErrorDiscriminator] = scala.List(JobDatabaseError, JobGenericError)

    private[this] val byName: Map[String, JobErrorDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): JobErrorDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[JobErrorDiscriminator] = byName.get(value.toLowerCase)

  }

  final case class JobDatabaseError(
    databaseName: String,
    databaseAction: String,
    errorMessage: String
  ) extends JobError

  final case class JobGenericError(
    errorMessage: String
  ) extends JobError

  final case class JobInstance(
    id: String,
    key: String,
    job: _root_.play.api.libs.json.JsValue,
    input: _root_.scala.Option[_root_.play.api.libs.json.JsValue] = None,
    output: _root_.scala.Option[_root_.play.api.libs.json.JsValue] = None,
    errors: _root_.scala.Option[Seq[_root_.play.api.libs.json.JsValue]] = None
  )

  /**
    * Provides future compatibility in clients - in the future, when a type is added
    * to the union JobError, it will need to be handled in the client code. This
    * implementation will deserialize these future types as an instance of this class.
    *
    * @param description Information about the type that we received that is undefined in this version of
    *        the client.
    */
  final case class JobErrorUndefinedType(
    description: String
  ) extends JobError

}

package io.flow.job.internal.before.generic.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.job.internal.before.generic.models.json._

    private[generic] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[generic] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[generic] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[generic] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    private[generic] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateParser
      dateParser.parseLocalDate(str)
    }

    private[generic] implicit val jsonWritesJodaLocalDate = new Writes[org.joda.time.LocalDate] {
      def writes(x: org.joda.time.LocalDate) = {
        import org.joda.time.format.ISODateTimeFormat.date
        val str = date.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsJobInternalBeforeGenericJobDatabaseError: play.api.libs.json.Reads[JobDatabaseError] = {
      (
        (__ \ "database_name").read[String] and
          (__ \ "database_action").read[String] and
          (__ \ "error_message").read[String]
        )(JobDatabaseError.apply _)
    }

    def jsObjectJobDatabaseError(obj: io.flow.job.internal.before.generic.models.JobDatabaseError): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "database_name" -> play.api.libs.json.JsString(obj.databaseName),
        "database_action" -> play.api.libs.json.JsString(obj.databaseAction),
        "error_message" -> play.api.libs.json.JsString(obj.errorMessage)
      )
    }

    implicit def jsonReadsJobInternalBeforeGenericJobGenericError: play.api.libs.json.Reads[JobGenericError] = {
      (__ \ "error_message").read[String].map { x => new JobGenericError(errorMessage = x) }
    }

    def jsObjectJobGenericError(obj: io.flow.job.internal.before.generic.models.JobGenericError): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "error_message" -> play.api.libs.json.JsString(obj.errorMessage)
      )
    }

    implicit def jsonReadsJobInternalBeforeGenericJobInstance: play.api.libs.json.Reads[JobInstance] = {
      (
        (__ \ "id").read[String] and
          (__ \ "key").read[String] and
          (__ \ "job").read[_root_.play.api.libs.json.JsValue] and
          (__ \ "input").readNullable[_root_.play.api.libs.json.JsValue] and
          (__ \ "output").readNullable[_root_.play.api.libs.json.JsValue] and
          (__ \ "errors").readNullable[Seq[_root_.play.api.libs.json.JsValue]]
        )(JobInstance.apply _)
    }

    def jsObjectJobInstance(obj: io.flow.job.internal.before.generic.models.JobInstance): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "key" -> play.api.libs.json.JsString(obj.key),
        "job" -> obj.job
      ) ++ (obj.input match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("input" -> x)
      }) ++
        (obj.output match {
          case None => play.api.libs.json.Json.obj()
          case Some(x) => play.api.libs.json.Json.obj("output" -> x)
        }) ++
        (obj.errors match {
          case None => play.api.libs.json.Json.obj()
          case Some(x) => play.api.libs.json.Json.obj("errors" -> play.api.libs.json.Json.toJson(x))
        })
    }

    implicit def jsonWritesJobInternalBeforeGenericJobInstance: play.api.libs.json.Writes[JobInstance] = {
      new play.api.libs.json.Writes[io.flow.job.internal.before.generic.models.JobInstance] {
        def writes(obj: io.flow.job.internal.before.generic.models.JobInstance) = {
          jsObjectJobInstance(obj)
        }
      }
    }

    implicit def jsonReadsJobInternalBeforeGenericJobError: play.api.libs.json.Reads[JobError] = new play.api.libs.json.Reads[JobError] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[JobError] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[JobError] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "job_database_error" => js.validate[io.flow.job.internal.before.generic.models.JobDatabaseError]
          case "job_generic_error" => js.validate[io.flow.job.internal.before.generic.models.JobGenericError]
          case other => play.api.libs.json.JsSuccess(io.flow.job.internal.before.generic.models.JobErrorUndefinedType(other))
        }
      }
    }

    def jsObjectJobError(obj: io.flow.job.internal.before.generic.models.JobError): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.job.internal.before.generic.models.JobDatabaseError => jsObjectJobDatabaseError(x) ++ play.api.libs.json.Json.obj("discriminator" -> "job_database_error")
        case x: io.flow.job.internal.before.generic.models.JobGenericError => jsObjectJobGenericError(x) ++ play.api.libs.json.Json.obj("discriminator" -> "job_generic_error")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesJobInternalBeforeGenericJobError: play.api.libs.json.Writes[JobError] = {
      new play.api.libs.json.Writes[io.flow.job.internal.before.generic.models.JobError] {
        def writes(obj: io.flow.job.internal.before.generic.models.JobError) = {
          jsObjectJobError(obj)
        }
      }
    }
  }
}

package io.flow.job.internal.before.generic {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      import org.joda.time.{format, DateTime, LocalDate}

      val dateTimeIso8601: ApibuilderTypeConverter[DateTime] = new ApibuilderTypeConverter[DateTime] {
        override def convert(value: String): DateTime = format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: DateTime): String = format.ISODateTimeFormat.dateTime.print(value)
        override def example: DateTime = DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[LocalDate] = new ApibuilderTypeConverter[LocalDate] {
        override def convert(value: String): LocalDate = format.ISODateTimeFormat.yearMonthDay.parseLocalDate(value)
        override def convert(value: LocalDate): String = value.toString
        override def example: LocalDate = LocalDate.now
      }

    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.job.internal.before.generic {

  object Constants {

    val Namespace = "io.flow.job.internal.before.generic"
    val UserAgent = "apibuilder 0.14.3 app.apibuilder.io/flow/job-internal-before-generic/test-0.0.1/play_2_6_client"
    val Version = "test-0.0.1"

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.job.internal.before.generic.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.job.internal.before.generic.models.json._

    private[this] val logger = play.api.Logger("io.flow.job.internal.before.generic.Client")

    logger.info(s"Initializing io.flow.job.internal.before.generic.Client for url $baseUrl")





    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
        case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
        case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
      * Adds a Content-Type: application/json header unless the specified requestHeaders
      * already contain a Content-Type header
      */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.job.internal.before.generic.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String

    }

  }



  package errors {

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}