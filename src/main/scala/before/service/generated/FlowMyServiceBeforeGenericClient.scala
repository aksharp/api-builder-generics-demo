/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: test-0.0.1
 * apibuilder 0.14.3 app.apibuilder.io/flow/my-service-before-generic/test-0.0.1/play_2_6_client
 */
package io.flow.my.service.before.generic.models {

  sealed trait JobInstanceInput extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type JobInstanceInput
   */
  sealed trait JobInstanceInputDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object JobInstanceInputDiscriminator {

    case object Day extends JobInstanceInputDiscriminator { override def toString = "day" }

    final case class UNDEFINED(override val toString: String) extends JobInstanceInputDiscriminator

    val all: scala.List[JobInstanceInputDiscriminator] = scala.List(Day)

    private[this] val byName: Map[String, JobInstanceInputDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): JobInstanceInputDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[JobInstanceInputDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait JobInstanceOutput extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type JobInstanceOutput
   */
  sealed trait JobInstanceOutputDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object JobInstanceOutputDiscriminator {

    case object TotalDailyRevenueByOrganization extends JobInstanceOutputDiscriminator { override def toString = "total_daily_revenue_by_organization" }

    final case class UNDEFINED(override val toString: String) extends JobInstanceOutputDiscriminator

    val all: scala.List[JobInstanceOutputDiscriminator] = scala.List(TotalDailyRevenueByOrganization)

    private[this] val byName: Map[String, JobInstanceOutputDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): JobInstanceOutputDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[JobInstanceOutputDiscriminator] = byName.get(value.toLowerCase)

  }

  final case class Day(
    day: _root_.org.joda.time.DateTime
  ) extends JobInstanceInput

  final case class TotalDailyRevenueByOrganization(
    organizationId: String,
    totalRevenue: Double
  ) extends JobInstanceOutput

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union JobInstanceInput, it will need to be handled in the client code.
   * This implementation will deserialize these future types as an instance of this
   * class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class JobInstanceInputUndefinedType(
    description: String
  ) extends JobInstanceInput

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union JobInstanceOutput, it will need to be handled in the client code.
   * This implementation will deserialize these future types as an instance of this
   * class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class JobInstanceOutputUndefinedType(
    description: String
  ) extends JobInstanceOutput

  sealed trait Job extends _root_.scala.Product with _root_.scala.Serializable

  object Job {

    case object MyDailyEtlJob extends Job { override def toString = "my_daily_etl_job" }
    case object MyWeeklyEtlJob extends Job { override def toString = "my_weekly_etl_job" }
    case object MyLongRunningJob extends Job { override def toString = "my_long_running_job" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends Job

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Job] = scala.List(MyDailyEtlJob, MyWeeklyEtlJob, MyLongRunningJob)

    private[this]
    val byName: Map[String, Job] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Job = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Job] = byName.get(value.toLowerCase)

  }

}

package io.flow.my.service.before.generic.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.my.service.before.generic.models.json._

    private[generic] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[generic] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[generic] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[generic] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    private[generic] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateParser
      dateParser.parseLocalDate(str)
    }

    private[generic] implicit val jsonWritesJodaLocalDate = new Writes[org.joda.time.LocalDate] {
      def writes(x: org.joda.time.LocalDate) = {
        import org.joda.time.format.ISODateTimeFormat.date
        val str = date.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsMyServiceBeforeGenericJob = new play.api.libs.json.Reads[io.flow.my.service.before.generic.models.Job] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.my.service.before.generic.models.Job] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.my.service.before.generic.models.Job(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.my.service.before.generic.models.Job(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesMyServiceBeforeGenericJob(obj: io.flow.my.service.before.generic.models.Job) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectJob(obj: io.flow.my.service.before.generic.models.Job) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesMyServiceBeforeGenericJob: play.api.libs.json.Writes[Job] = {
      new play.api.libs.json.Writes[io.flow.my.service.before.generic.models.Job] {
        def writes(obj: io.flow.my.service.before.generic.models.Job) = {
          jsonWritesMyServiceBeforeGenericJob(obj)
        }
      }
    }

    implicit def jsonReadsMyServiceBeforeGenericDay: play.api.libs.json.Reads[Day] = {
      (__ \ "day").read[_root_.org.joda.time.DateTime].map { x => new Day(day = x) }
    }

    def jsObjectDay(obj: io.flow.my.service.before.generic.models.Day): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "day" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.day))
      )
    }

    implicit def jsonReadsMyServiceBeforeGenericTotalDailyRevenueByOrganization: play.api.libs.json.Reads[TotalDailyRevenueByOrganization] = {
      (
        (__ \ "organization_id").read[String] and
        (__ \ "total_revenue").read[Double]
      )(TotalDailyRevenueByOrganization.apply _)
    }

    def jsObjectTotalDailyRevenueByOrganization(obj: io.flow.my.service.before.generic.models.TotalDailyRevenueByOrganization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization_id" -> play.api.libs.json.JsString(obj.organizationId),
        "total_revenue" -> play.api.libs.json.JsNumber(obj.totalRevenue)
      )
    }

    implicit def jsonReadsMyServiceBeforeGenericJobInstanceInput: play.api.libs.json.Reads[JobInstanceInput] = new play.api.libs.json.Reads[JobInstanceInput] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[JobInstanceInput] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[JobInstanceInput] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "day" => js.validate[io.flow.my.service.before.generic.models.Day]
          case other => play.api.libs.json.JsSuccess(io.flow.my.service.before.generic.models.JobInstanceInputUndefinedType(other))
        }
      }
    }

    def jsObjectJobInstanceInput(obj: io.flow.my.service.before.generic.models.JobInstanceInput): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.my.service.before.generic.models.Day => jsObjectDay(x) ++ play.api.libs.json.Json.obj("discriminator" -> "day")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesMyServiceBeforeGenericJobInstanceInput: play.api.libs.json.Writes[JobInstanceInput] = {
      new play.api.libs.json.Writes[io.flow.my.service.before.generic.models.JobInstanceInput] {
        def writes(obj: io.flow.my.service.before.generic.models.JobInstanceInput) = {
          jsObjectJobInstanceInput(obj)
        }
      }
    }

    implicit def jsonReadsMyServiceBeforeGenericJobInstanceOutput: play.api.libs.json.Reads[JobInstanceOutput] = new play.api.libs.json.Reads[JobInstanceOutput] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[JobInstanceOutput] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[JobInstanceOutput] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "total_daily_revenue_by_organization" => js.validate[io.flow.my.service.before.generic.models.TotalDailyRevenueByOrganization]
          case other => play.api.libs.json.JsSuccess(io.flow.my.service.before.generic.models.JobInstanceOutputUndefinedType(other))
        }
      }
    }

    def jsObjectJobInstanceOutput(obj: io.flow.my.service.before.generic.models.JobInstanceOutput): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.my.service.before.generic.models.TotalDailyRevenueByOrganization => jsObjectTotalDailyRevenueByOrganization(x) ++ play.api.libs.json.Json.obj("discriminator" -> "total_daily_revenue_by_organization")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesMyServiceBeforeGenericJobInstanceOutput: play.api.libs.json.Writes[JobInstanceOutput] = {
      new play.api.libs.json.Writes[io.flow.my.service.before.generic.models.JobInstanceOutput] {
        def writes(obj: io.flow.my.service.before.generic.models.JobInstanceOutput) = {
          jsObjectJobInstanceOutput(obj)
        }
      }
    }
  }
}

package io.flow.my.service.before.generic {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.flow.my.service.before.generic.models._

      val jobConverter: ApibuilderTypeConverter[io.flow.my.service.before.generic.models.Job] = new ApibuilderTypeConverter[io.flow.my.service.before.generic.models.Job] {
        override def convert(value: String): io.flow.my.service.before.generic.models.Job = io.flow.my.service.before.generic.models.Job(value)
        override def convert(value: io.flow.my.service.before.generic.models.Job): String = value.toString
        override def example: io.flow.my.service.before.generic.models.Job = io.flow.my.service.before.generic.models.Job.MyDailyEtlJob
        override def validValues: Seq[io.flow.my.service.before.generic.models.Job] = io.flow.my.service.before.generic.models.Job.all
      }
      implicit def pathBindableJob(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.flow.my.service.before.generic.models.Job] = ApibuilderPathBindable(jobConverter)
      implicit def queryStringBindableJob(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.flow.my.service.before.generic.models.Job] = ApibuilderQueryStringBindable(jobConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      import org.joda.time.{format, DateTime, LocalDate}

      val dateTimeIso8601: ApibuilderTypeConverter[DateTime] = new ApibuilderTypeConverter[DateTime] {
        override def convert(value: String): DateTime = format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: DateTime): String = format.ISODateTimeFormat.dateTime.print(value)
        override def example: DateTime = DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[LocalDate] = new ApibuilderTypeConverter[LocalDate] {
        override def convert(value: String): LocalDate = format.ISODateTimeFormat.yearMonthDay.parseLocalDate(value)
        override def convert(value: LocalDate): String = value.toString
        override def example: LocalDate = LocalDate.now
      }

    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.my.service.before.generic {

  object Constants {

    val Namespace = "io.flow.my.service.before.generic"
    val UserAgent = "apibuilder 0.14.3 app.apibuilder.io/flow/my-service-before-generic/test-0.0.1/play_2_6_client"
    val Version = "test-0.0.1"

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.my.service.before.generic.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.my.service.before.generic.models.json._

    private[this] val logger = play.api.Logger("io.flow.my.service.before.generic.Client")

    logger.info(s"Initializing io.flow.my.service.before.generic.Client for url $baseUrl")





    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.my.service.before.generic.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String

    }

  }



  package errors {

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}